@page "/user"
@page "/user/{id:int}"
@inject IUserService UserService
@inject NavigationManager NavigationManager

@if (Id is null)
{
    <PageTitle>Create a new Product</PageTitle>
    <h3>Create a new Product</h3>
}
else
{
    <PageTitle>Edit @systemUser.Username</PageTitle>
    <h3>Edit @systemUser.Username</h3>
}

<EditForm Model="systemUser" OnSubmit="HandleSubmit">
    <div>
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="systemUser.Email" class="form-control" />
    </div>
    <div>
        <label for="name">Name</label>
        <InputText id="name" @bind-Value="systemUser.Name" class="form-control" />
    </div>
    <div>
        <label for="userName">UserName</label>
        <InputText id="userName" @bind-Value="systemUser.Username" class="form-control" />
    </div>
 @*   <div>
        <label for="roleId">RoleId</label>
        <InputNumber id="roleId" @bind-Value="systemUser.RoleId" class="form-control" />
    </div>*@
    <br />
    <button type="submit" class="btn btn-primary">@btnText</button>
    <button type="button" class="btn btn-danger"
            @onclick="DeleteUser">
        Delete User
    </button>
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    string btnText = string.Empty;

    BlazorAuthenticationTutorial.Shared.SystemUser systemUser =
        new BlazorAuthenticationTutorial.Shared.SystemUser();

    protected override void OnInitialized()
    {
        btnText = Id == null ? "Save New User" : "Update User";
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            var result = await UserService.GetSingleUser((int)Id);
            if (result is not null)
                systemUser = result;
            else
                NavigationManager.NavigateTo("/user");
        }
    }

    async Task HandleSubmit()
    {
        if (Id is null)
        {
            await UserService.CreateUser(systemUser);
            NavigationManager.NavigateTo("/users");
        }
        else
        {
            await UserService.UpdateUser(systemUser);
            NavigationManager.NavigateTo("/users");
        }
    }

    async Task DeleteUser()
    {
        await UserService.DeleteUser(systemUser.Id);
    }
    

}
